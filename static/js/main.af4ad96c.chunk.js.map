{"version":3,"sources":["index.js"],"names":["ColoredLine","color","style","backgroundColor","height","Square","props","className","onClick","console","log","value","Board","i","this","squares","renderSquare","type","alert","React","Component","Game","state","history","Array","fill","xIsNext","status","current","length","winner","calculateWinner","moves","map","step","move","desc","jumpTo","handleClick","sqsCopy","slice","symbol","setState","concat","lines","a","b","c","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQASMA,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAClB,wBACEC,MAAO,CACLD,MAAOA,EACPE,gBAAiBF,EACjBG,OAAQ,MASd,SAASC,EAAOC,GACd,OACE,4BACEC,UAAU,SACVC,QAAS,WACPF,EAAME,UACNC,QAAQC,IAAI,WAGbJ,EAAMK,O,IAKPC,E,2KACSC,GAAI,IAAD,OACd,OACE,kBAACR,EAAD,CACEM,MAAOG,KAAKR,MAAMS,QAAQF,GAC1BL,QAAS,kBAAM,EAAKF,MAAME,QAAQK,Q,+BAMtC,OAEE,6BACE,yBAAKN,UAAU,aACZO,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKT,UAAU,aACZO,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKT,UAAU,aACZO,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,kBAAChB,EAAD,CAAaC,MAAM,SACnB,kBAAC,IAAD,CACEgB,KAAK,UACLT,QAAS,kBAAMU,MAAM,iDAFvB,UAOA,kBAAC,IAAD,CACED,KAAK,QACLT,QAAS,kBAAMU,MAAM,+CAFvB,UAOA,4BAAQV,QAAS,kBAAMU,MAAM,iCAA7B,qB,GA5CYC,IAAMC,WAoDpBC,E,kDACJ,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACXC,QAAS,CACP,CACER,QAASS,MAAM,GAAGC,KAAK,QAG3BC,SAAS,GARM,E,qDAYT,IAcJC,EAdG,OACDJ,EAAUT,KAAKQ,MAAMC,QACrBK,EAAUL,EAAQA,EAAQM,OAAS,GACnCC,EAASC,EAAgBH,EAAQb,SAEjCiB,EAAQT,EAAQU,KAAI,SAACC,EAAMC,GAC/B,IAAMC,EAAOD,EAAO,cAAgBA,EAAO,cAC3C,OACE,4BACE,4BAAQ3B,QAAS,kBAAM,EAAK6B,OAAOF,KAAQC,OAYjD,OALET,EADEG,EACO,WAAaA,EAEb,iBAAmBhB,KAAKQ,MAAMI,QAAU,IAAM,KAIvD,yBAAKnB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACK,EAAD,CACEG,QAASa,EAAQb,QACjBP,QAAS,SAACK,GAAD,OAAO,EAAKyB,YAAYzB,OAGrC,yBAAKN,UAAU,aACb,6BAAMoB,GACN,4BAAKK,O,kCAMDnB,GACV,IAAMU,EAAUT,KAAKQ,MAAMC,QACrBK,EAAUL,EAAQA,EAAQM,OAAS,GACnCU,EAAUX,EAAQb,QAAQyB,QAEhC/B,QAAQC,IAAI,qBAAuBG,GACnCJ,QAAQC,IAAI,aAAekB,GAC3BnB,QAAQC,IAAI,gBAAkB6B,EAAQ1B,IAGtC,IAAMiB,EAASC,EAAgBH,EAAQb,SAEvC,GAAIe,GAAUS,EAAQ1B,GACpBJ,QAAQC,IAAI,wBAAyBoB,OADvC,CAIA,IAAIW,EAAS3B,KAAKQ,MAAMI,QAAU,IAAM,IACxCa,EAAQ1B,GAAK4B,EACb3B,KAAK4B,SAAS,CACZnB,QAASA,EAAQoB,OAAO,CACtB,CACE5B,QAASwB,KAGbb,SAAUZ,KAAKQ,MAAMI,e,GA1ERP,IAAMC,WAwFzB,SAASW,EAAgBhB,GAWvB,IAVA,IAAM6B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA/B,EAAI,EAAGA,EAAI+B,EAAMf,OAAQhB,IAAK,CAAC,IAAD,cACnB+B,EAAM/B,GADa,GAC9BgC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIhC,EAAQ8B,IAAM9B,EAAQ8B,KAAO9B,EAAQ+B,IAAM/B,EAAQ8B,KAAO9B,EAAQgC,GACpE,OAAOhC,EAAQ8B,GAGnB,OAAO,KAxBTG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC7B,EAAD,OAEF8B,SAASC,eAAe,U","file":"static/js/main.af4ad96c.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Button } from \"antd\";\n\ndebugger;\n\n// https://stackoverflow.com/questions/48156902/how-can-i-draw-red-horizontal-line-in-react\n// need to move colors to CSS\nconst ColoredLine = ({ color }) => (\n  <hr\n    style={{\n      color: color,\n      backgroundColor: color,\n      height: 5,\n    }}\n  />\n);\n\n/* In React, function components (like Square), \n   only contain a render() method and don't have their own state.\n   The earlier version of this extended React.Component\n */\nfunction Square(props) {\n  return (\n    <button\n      className=\"square\"\n      onClick={() => {\n        props.onClick();\n        console.log(\"X hit\");\n      }}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      // it must return one div\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        <ColoredLine color=\"blue\" />\n        <Button\n          type=\"primary\"\n          onClick={() => alert(\"you clicked the antd button of type primary\")}\n        >\n          antd 1\n        </Button>\n\n        <Button\n          type=\"ghost\"\n          onClick={() => alert(\"you clicked the antd button of type ghost\")}\n        >\n          antd 2\n        </Button>\n\n        <button onClick={() => alert(\"you clicked the html button\")}>\n          vanilla html\n        </button>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      xIsNext: true,\n    };\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? \"Go to move \" + move : \"Go to start\";\n      return (\n        <li>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const sqsCopy = current.squares.slice();\n\n    console.log(\"handleSqClick hit \" + i);\n    console.log(\"current = \" + current);\n    console.log(\"sqsCopy[i] = \" + sqsCopy[i]);\n\n    // Treat sqs as immutable so code is cleaner.\n    const winner = calculateWinner(current.squares);\n\n    if (winner || sqsCopy[i]) {\n      console.log(\"return early, winner=\", winner);\n      return;\n    }\n    let symbol = this.state.xIsNext ? \"X\" : \"0\";\n    sqsCopy[i] = symbol;\n    this.setState({\n      history: history.concat([\n        {\n          squares: sqsCopy,\n        },\n      ]),\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}