{"version":3,"sources":["index.js"],"names":["ColoredLine","color","style","backgroundColor","height","Square","props","className","onClick","console","log","value","Board","state","xIsNext","sqs","Array","fill","i","this","handleSqClick","sqsCopy","slice","symbol","setState","status","winner","squares","lines","length","a","b","c","calculateWinner","renderSquare","type","alert","React","Component","Game","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAOMA,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAClB,wBACEC,MAAO,CACLD,MAAOA,EACPE,gBAAiBF,EACjBG,OAAQ,MASd,SAASC,EAAOC,GACd,OACE,4BACEC,UAAU,SACVC,QAAS,WACPF,EAAME,UACNC,QAAQC,IAAI,WAGbJ,EAAMK,O,IAKPC,E,kDACJ,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,SAAS,EACTC,IAAKC,MAAM,GAAGC,KAAK,OAJJ,E,yDAONC,GAAI,IAAD,OACd,OACE,kBAACb,EAAD,CAAQM,MAAOQ,KAAKN,MAAME,IAAIG,GAAIV,QAAS,kBAAM,EAAKY,cAAcF,Q,oCAI1DA,GACZT,QAAQC,IAAI,qBAAuBQ,GAEnC,IAAMG,EAAUF,KAAKN,MAAME,IAAIO,QAE3BC,EAASJ,KAAKN,MAAMC,QAAU,IAAM,IACxCO,EAAQH,GAAKK,EACbJ,KAAKK,SAAS,CACZT,IAAKM,EACLP,SAAUK,KAAKN,MAAMC,Y,+BAKvB,IACIW,EADEC,EA2EV,SAAyBC,GAWvB,IAVA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAV,EAAI,EAAGA,EAAIU,EAAMC,OAAQX,IAAK,CAAC,IAAD,cACnBU,EAAMV,GADa,GAC9BY,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIL,EAAQG,IAAMH,EAAQG,KAAOH,EAAQI,IAAMJ,EAAQG,KAAOH,EAAQK,GACpE,OAAOL,EAAQG,GAGnB,OAAO,KA5FUG,CAAgBd,KAAKN,MAAME,KAQ1C,OALEU,EADEC,EACO,WAAaA,EAEb,iBAAmBP,KAAKN,MAAMC,QAAU,IAAM,KAKvD,6BACE,yBAAKP,UAAU,UAAUkB,GACzB,yBAAKlB,UAAU,aACZY,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,IAErB,yBAAK3B,UAAU,aACZY,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,IAErB,yBAAK3B,UAAU,aACZY,KAAKe,aAAa,GAClBf,KAAKe,aAAa,GAClBf,KAAKe,aAAa,IAErB,kBAAClC,EAAD,CAAaC,MAAM,SACnB,kBAAC,IAAD,CACEkC,KAAK,UACL3B,QAAS,kBAAM4B,MAAM,iDAFvB,UAOA,kBAAC,IAAD,CACED,KAAK,QACL3B,QAAS,kBAAM4B,MAAM,+CAFvB,UAOA,4BAAQ5B,QAAS,kBAAM4B,MAAM,iCAA7B,qB,GAtEYC,IAAMC,WA8EpBC,E,uKAEF,OACE,yBAAKhC,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACK,EAAD,OAEF,yBAAKL,UAAU,aACb,8BACA,mC,GATS8B,IAAMC,WAkBzBE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACH,EAAD,OAEFI,SAASC,eAAe,U","file":"static/js/main.b969b8a7.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Button } from \"antd\";\n\n// https://stackoverflow.com/questions/48156902/how-can-i-draw-red-horizontal-line-in-react\n// need to move colors to CSS\nconst ColoredLine = ({ color }) => (\n  <hr\n    style={{\n      color: color,\n      backgroundColor: color,\n      height: 5,\n    }}\n  />\n);\n\n/* In React, function components (like Square), \n   only contain a render() method and don't have their own state.\n   The earlier versioj of this extended React.Component\n */\nfunction Square(props) {\n  return (\n    <button\n      className=\"square\"\n      onClick={() => {\n        props.onClick();\n        console.log(\"X hit\");\n      }}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xIsNext: true,\n      sqs: Array(9).fill(null),\n    };\n  }\n  renderSquare(i) {\n    return (\n      <Square value={this.state.sqs[i]} onClick={() => this.handleSqClick(i)} />\n    );\n  }\n\n  handleSqClick(i) {\n    console.log(\"handleSqClick hit \" + i);\n    // Treat sqs as immutable so code is cleaner.\n    const sqsCopy = this.state.sqs.slice();\n\n    let symbol = this.state.xIsNext ? \"X\" : \"0\";\n    sqsCopy[i] = symbol;\n    this.setState({\n      sqs: sqsCopy,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.sqs);\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      // it must return one div\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        <ColoredLine color=\"blue\" />\n        <Button\n          type=\"primary\"\n          onClick={() => alert(\"you clicked the antd button of type primary\")}\n        >\n          antd 1\n        </Button>\n\n        <Button\n          type=\"ghost\"\n          onClick={() => alert(\"you clicked the antd button of type ghost\")}\n        >\n          antd 2\n        </Button>\n\n        <button onClick={() => alert(\"you clicked the html button\")}>\n          vanilla html\n        </button>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}